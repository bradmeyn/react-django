/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as appDashboardImport } from './routes/(app)/_dashboard'
import { Route as authRegisterIndexImport } from './routes/(auth)/register/index'
import { Route as authLoginIndexImport } from './routes/(auth)/login/index'
import { Route as appDashboardDashboardIndexImport } from './routes/(app)/_dashboard/dashboard/index'
import { Route as appDashboardClientsIndexImport } from './routes/(app)/_dashboard/clients/index'
import { Route as appDashboardClientsclientIdIndexImport } from './routes/(app)/_dashboard/clients/[clientId]/index'

// Create Virtual Routes

const appImport = createFileRoute('/(app)')()

// Create/Update Routes

const appRoute = appImport.update({
  id: '/(app)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const appDashboardRoute = appDashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => appRoute,
} as any)

const authRegisterIndexRoute = authRegisterIndexImport.update({
  id: '/(auth)/register/',
  path: '/register/',
  getParentRoute: () => rootRoute,
} as any)

const authLoginIndexRoute = authLoginIndexImport.update({
  id: '/(auth)/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const appDashboardDashboardIndexRoute = appDashboardDashboardIndexImport.update(
  {
    id: '/dashboard/',
    path: '/dashboard/',
    getParentRoute: () => appDashboardRoute,
  } as any,
)

const appDashboardClientsIndexRoute = appDashboardClientsIndexImport.update({
  id: '/clients/',
  path: '/clients/',
  getParentRoute: () => appDashboardRoute,
} as any)

const appDashboardClientsclientIdIndexRoute =
  appDashboardClientsclientIdIndexImport.update({
    id: '/clients/[clientId]/',
    path: '/clients/[clientId]/',
    getParentRoute: () => appDashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appImport
      parentRoute: typeof rootRoute
    }
    '/(app)/_dashboard': {
      id: '/(app)/_dashboard'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appDashboardImport
      parentRoute: typeof appRoute
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register/': {
      id: '/(auth)/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterIndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)/_dashboard/clients/': {
      id: '/(app)/_dashboard/clients/'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof appDashboardClientsIndexImport
      parentRoute: typeof appDashboardImport
    }
    '/(app)/_dashboard/dashboard/': {
      id: '/(app)/_dashboard/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof appDashboardDashboardIndexImport
      parentRoute: typeof appDashboardImport
    }
    '/(app)/_dashboard/clients/[clientId]/': {
      id: '/(app)/_dashboard/clients/[clientId]/'
      path: '/clients/[clientId]'
      fullPath: '/clients/[clientId]'
      preLoaderRoute: typeof appDashboardClientsclientIdIndexImport
      parentRoute: typeof appDashboardImport
    }
  }
}

// Create and export the route tree

interface appDashboardRouteChildren {
  appDashboardClientsIndexRoute: typeof appDashboardClientsIndexRoute
  appDashboardDashboardIndexRoute: typeof appDashboardDashboardIndexRoute
  appDashboardClientsclientIdIndexRoute: typeof appDashboardClientsclientIdIndexRoute
}

const appDashboardRouteChildren: appDashboardRouteChildren = {
  appDashboardClientsIndexRoute: appDashboardClientsIndexRoute,
  appDashboardDashboardIndexRoute: appDashboardDashboardIndexRoute,
  appDashboardClientsclientIdIndexRoute: appDashboardClientsclientIdIndexRoute,
}

const appDashboardRouteWithChildren = appDashboardRoute._addFileChildren(
  appDashboardRouteChildren,
)

interface appRouteChildren {
  appDashboardRoute: typeof appDashboardRouteWithChildren
}

const appRouteChildren: appRouteChildren = {
  appDashboardRoute: appDashboardRouteWithChildren,
}

const appRouteWithChildren = appRoute._addFileChildren(appRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof appDashboardRouteWithChildren
  '/login': typeof authLoginIndexRoute
  '/register': typeof authRegisterIndexRoute
  '/clients': typeof appDashboardClientsIndexRoute
  '/dashboard': typeof appDashboardDashboardIndexRoute
  '/clients/[clientId]': typeof appDashboardClientsclientIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof appDashboardRouteWithChildren
  '/login': typeof authLoginIndexRoute
  '/register': typeof authRegisterIndexRoute
  '/clients': typeof appDashboardClientsIndexRoute
  '/dashboard': typeof appDashboardDashboardIndexRoute
  '/clients/[clientId]': typeof appDashboardClientsclientIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(app)': typeof appRouteWithChildren
  '/(app)/_dashboard': typeof appDashboardRouteWithChildren
  '/(auth)/login/': typeof authLoginIndexRoute
  '/(auth)/register/': typeof authRegisterIndexRoute
  '/(app)/_dashboard/clients/': typeof appDashboardClientsIndexRoute
  '/(app)/_dashboard/dashboard/': typeof appDashboardDashboardIndexRoute
  '/(app)/_dashboard/clients/[clientId]/': typeof appDashboardClientsclientIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/clients'
    | '/dashboard'
    | '/clients/[clientId]'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/clients'
    | '/dashboard'
    | '/clients/[clientId]'
  id:
    | '__root__'
    | '/'
    | '/(app)'
    | '/(app)/_dashboard'
    | '/(auth)/login/'
    | '/(auth)/register/'
    | '/(app)/_dashboard/clients/'
    | '/(app)/_dashboard/dashboard/'
    | '/(app)/_dashboard/clients/[clientId]/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appRoute: typeof appRouteWithChildren
  authLoginIndexRoute: typeof authLoginIndexRoute
  authRegisterIndexRoute: typeof authRegisterIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appRoute: appRouteWithChildren,
  authLoginIndexRoute: authLoginIndexRoute,
  authRegisterIndexRoute: authRegisterIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(app)",
        "/(auth)/login/",
        "/(auth)/register/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(app)": {
      "filePath": "(app)",
      "children": [
        "/(app)/_dashboard"
      ]
    },
    "/(app)/_dashboard": {
      "filePath": "(app)/_dashboard.tsx",
      "parent": "/(app)",
      "children": [
        "/(app)/_dashboard/clients/",
        "/(app)/_dashboard/dashboard/",
        "/(app)/_dashboard/clients/[clientId]/"
      ]
    },
    "/(auth)/login/": {
      "filePath": "(auth)/login/index.tsx"
    },
    "/(auth)/register/": {
      "filePath": "(auth)/register/index.tsx"
    },
    "/(app)/_dashboard/clients/": {
      "filePath": "(app)/_dashboard/clients/index.tsx",
      "parent": "/(app)/_dashboard"
    },
    "/(app)/_dashboard/dashboard/": {
      "filePath": "(app)/_dashboard/dashboard/index.tsx",
      "parent": "/(app)/_dashboard"
    },
    "/(app)/_dashboard/clients/[clientId]/": {
      "filePath": "(app)/_dashboard/clients/[clientId]/index.tsx",
      "parent": "/(app)/_dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
